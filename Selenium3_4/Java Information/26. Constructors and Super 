Constructors and this Keywords

1. Constructor name and class name should be same
2. Constructor don't have return type. 
3. No need to create default Constructor as JVM by default add this for us behind. 
4. Constructors is used to initialize the instance variable at the time of object creation
5. Constructors supports access modifiers. e.g. public, private, default
6. Private constructors object can not be create from other class if use inheritance
7. Types of constructors:
	A) default constructor/no-argument constructor: The default constructor is a no-argument constructor.
	                       							e.g. public Dog()
	                             					{
	                              					//Constructor for Dog class
	                             					}
	B) Parameterized constructor
8. Constructors are nothing but the code which gets executed whenever a class is instantiated. 
9. If constructor have return type then it treated as Method.
10. The compiler provides a default constructor only when a constructor is not provided by the programmer.
11. Constructor can be overloaded like methods, on the basis of different argument list of their order.
12. public Dog()
    {
     System.out.println("I am default constructor");
    }
13. public Dog(int x)
    {
     System.out.println("I am parameterized constructor");
    }
14. public Dog(int x, String name)
    {
     System.out.println("I am parameterized constructor");
    }    

Constructor Chaining:

1. Constructor chaining is basically a process in which whenever constructor of sub-class is called, it will call the constructor of all super classes until constructor of 
   class Object is called. 
2. First we call the constructor of Hippo class. 
   The subclass will call the constructor of Animal class
   Finally the animal constructor calls the object constructor. 
   
   Object()
   |
   |
   Animal()
   |
   |
   Hippo()
   
Super keyword:

1. If we don't call the constructor of superclass the compiler implicitly calls the 'default' constructor of super class
2. But if the constructor of super class is overloaded, it is possible to call it from child class by using the keyword 'super(argument list)'